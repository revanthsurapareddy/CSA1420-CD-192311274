#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

char *input;  // Pointer to the input expression
char lookahead; // The current lookahead character

// Function to get the next character from the input
void nextChar() {
    lookahead = *input++;
}

// Function to handle F -> ( E ) | id
void F() {
    if (lookahead == '(') {
        nextChar();
        E();
        if (lookahead == ')') {
            nextChar();
        } else {
            printf("Error: expected ')'\n");
            exit(1);
        }
    } else if (isalpha(lookahead)) {  // Identifier rule
        nextChar();
    } else {
        printf("Error: expected 'id' or '('\n");
        exit(1);
    }
}

// Function to handle T' -> * F T' | ε
void T_prime() {
    if (lookahead == '*') {
        nextChar();
        F();
        T_prime();
    }  // epsilon (empty) production, do nothing
}

// Function to handle T -> F T'
void T() {
    F();
    T_prime();
}

// Function to handle E' -> + T E' | ε
void E_prime() {
    if (lookahead == '+') {
        nextChar();
        T();
        E_prime();
    }  // epsilon (empty) production, do nothing
}

// Function to handle E -> T E'
void E() {
    T();
    E_prime();
}

// Main parsing function
void parse(char *expression) {
    input = expression;
    nextChar();  // Initialize lookahead
    E();  // Start parsing from E

    if (lookahead == '\0') {
        printf("Parsing successful!\n");
    } else {
        printf("Error: unexpected character '%c'\n", lookahead);
    }
}

int main() {
    char expression[100];

    printf("Enter an expression to parse: ");
    fgets(expression, sizeof(expression), stdin);

    // Remove trailing newline if present
    size_t len = strlen(expression);
    if (len > 0 && expression[len - 1] == '\n') {
        expression[len - 1] = '\0';
    }

    parse(expression);  // Start the parsing process

    return 0;
}
